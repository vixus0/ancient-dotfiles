#!/usr/bin/env python

from subprocess import check_output, CalledProcessError
import time, sys


left_items = ['tags', 'clients']
centre_items = []
right_items = ['pacman', 'volume', 'battery', 'wifi', 'clock']


fmt = {
    'normal' : '%{B#FF101010}%{F#FFe0e0e0}%{U#FF101010}',
    'active' : '%{B#FFe0e0e0}%{F#FF101010}%{U#FFe0e0e0}',
    'urgent' : '%{B#FFac4142}%{F#FFe0e0e0}%{U#FFac4142}',
    'end'    : '%{B-}%{F-}'
    }


icons = {
    'tag_empty' : '○',
    'tag_act' : '●',
    'tag_fill': '◎',
    'pacman' : '⮢',
    'vol_on' : '⮞',
    'vol_mute' : '⮝',
    'batt' : '⮒',
    'clock' : '⮖',
    'wins' : '⮛',
    'wifi' : '⮸'
    }

spacer = 2

def stat_cmd(x): 
    return ['sh-stats', x]


def item(s, style='normal'):
    return ('{} {} {}'+' '*spacer).format(fmt[style], s, fmt['end'])


def run(args):
    try:
        out = check_output(args, timeout=None)
    except CalledProcessError:
        return None
    return out.decode().strip()


class Printer(object):

    def __init__(self):
        self.last_run = 0
        self.pkgs = None

    def tags(self):
        out = run(['herbstclient', 'tag_status'])
        tags = out.split()
        rtn = ''
        for t in tags:
            if t.startswith('#'):
                rtn += ' %{F#FFe0e0e0}'+icons['tag_act']
            elif t.startswith(':'):
                rtn += ' %{F#FFe0e0e0}'+icons['tag_fill']
            elif t.startswith('!'):
                rtn += ' %{F#FFac4142}'+icons['tag_fill']
            else:
                rtn += ' %{F#FFe0e0e0}'+icons['tag_empty']
        return item(rtn[1:])

    def clients(self):
        out = run(['herbstclient', 'get_attr', 'clients.focus.title'])
        if out:
            return item(out[:50], style='active')
        else:
            return ''

    def pacman(self):
        this_time = time.time()
        if this_time - self.last_run > 60:
           self.pkgs = run(['checkupdates'])
           self.last_run = this_time

        if self.pkgs:
            n = len(self.pkgs.split('\n'))
            return item(icons['pacman']+' '+str(n), style='urgent')
        else:
            return ''

    def battery(self):
        out = run(stat_cmd('batt_perc'))
        if not out:
            return ''
        if int(out) > 20:
            return item(icons['batt']+' '+out)
        else:
            return item(icons['batt']+' '+out, style='urgent')

    def wifi(self):
        out = run(stat_cmd('wifi_connm_ssid'))
        if not out:
            return item(icons['wifi'], style='urgent')
        return item(icons['wifi']+' '+out)

    def clock(self):
        out = time.strftime('%a %d %b %H:%M')
        return item(icons['clock']+' '+out)

    def volume(self):
        out = run(['amixer', 'sget', 'Master,0'])
        out = out.split('\n')
        line = out[-1].strip().split()
        vol = line[-3].strip('[]%')
        if 'off' in line[-1]:
            return item(icons['vol_mute'], style='urgent')
        else:
            return item(icons['vol_on']+' '+vol)


if __name__ == "__main__":

    prn = Printer()

    def add_items(ls):
        rtn = ''
        for thing in ls:
            func = getattr(prn, thing)
            if not func:
                continue
            rtn += func()
        return rtn

    while True:
        bigstr = '%{l}'+add_items(left_items)+'%{r}'+add_items(right_items)[:-spacer]
        print(bigstr)
        sys.stdout.flush()
        time.sleep(0.2)
